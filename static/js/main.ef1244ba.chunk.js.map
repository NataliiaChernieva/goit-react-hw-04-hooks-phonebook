{"version":3,"sources":["components/Container/Container.styled.jsx","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["Container","styled","div","Title","h1","SectionTitle","h2","CustomForm","form","CustomButton","button","Button","text","type","onClick","CurrentInput","input","CurrentLabel","label","Input","name","value","pattern","title","onChange","Form","handleSubmit","useState","setName","number","setNumber","handleSetInfo","e","target","reset","onSubmit","preventDefault","required","ContactItem","li","ContactListItem","handleDelete","ContactList","contacts","onDeleteContact","map","id","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","normaliseFilter","toLowerCase","filteredContacts","contact","includes","uuidv4","find","savedContact","alert","prevContacts","length","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef1244ba.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 400px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  padding: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 30px;\n`;\n\nexport const Title = styled.h1`\n  display: block;\n  font-size: 26px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n`;\n\nexport const SectionTitle = styled.h2`\n  display: block;\n  font-size: 20px;\n  font-weight: 800;\n  text-align: center;\n  text-transform: uppercase;\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomForm = styled.form`\n  padding: 0px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CustomButton = styled.button`\n  background-color: #ff6b0a;\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  padding: 3px 12px;\n  color: #fff;\n  font-weight: bold;\n  font-size: 12px;\n  line-height: 16px;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { CustomButton } from './Button.styled';\n\nfunction Button({ text, type, onClick }) {\n  return (\n    <CustomButton type={type} onClick={onClick}>\n      {text}\n    </CustomButton>\n  );\n}\n\n// Button.PropTypes = {\n//   text: PropTypes.string.isRequired,\n//   type: PropTypes.string.isRequired,\n// }\n\nexport default Button;\n","import styled from '@emotion/styled';\n\nexport const CurrentInput = styled.input`\n  display: block;\n  margin-top: 6px;\n  margin-bottom: 20px;\n`;\n\nexport const CurrentLabel = styled.label`\n  text-transform: capitalize;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { CurrentInput, CurrentLabel } from './Input.styled';\n\nexport default function Input({\n  type,\n  name,\n  value,\n  pattern = null,\n  title = null,\n  onChange,\n}) {\n  return (\n    <CurrentLabel>\n      {name}\n      <CurrentInput\n        type={type}\n        name={name}\n        value={value}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n      />\n    </CurrentLabel>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { CustomForm } from './Form.styled';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\n\nexport default function Form({ handleSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSetInfo = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    handleSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <CustomForm onSubmit={handleAddContact}>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleSetInfo}\n      />\n      <Button type=\"submit\" text=\"Add contact\" />\n    </CustomForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem } from './ContactListItem.styled';\nimport Button from '../Button/Button';\n\nexport default function ContactListItem({ name, number, handleDelete }) {\n  return (\n    <ContactItem>\n      {name} : {number}\n      <Button type=\"button\" text=\"delete\" onClick={handleDelete} />\n    </ContactItem>\n  );\n}\n\nContactListItem.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          handleDelete={() => onDeleteContact(id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  Container,\n  Title,\n  SectionTitle,\n} from './components/Container/Container.styled.jsx';\nimport Form from './components/Form/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Input from './components/Input/Input.jsx';\n// [\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   ]\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(localStorage.getItem('contactList')) ?? [],\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contactList', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandle = ({ name, number }) => {\n    const contact = { name, number, id: uuidv4() };\n    contacts.find(savedContact => savedContact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : setContacts(prevContacts => [...prevContacts, contact]);\n  };\n\n  const handleDelete = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const normaliseFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normaliseFilter),\n  );\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <Form handleSubmit={formSubmitHandle} />\n      {contacts.length !== 0 && <SectionTitle>Contacts</SectionTitle>}\n      {contacts.length !== 0 && (\n        <Input\n          name=\"Find contacts by name\"\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n        />\n      )}\n      <ContactList contacts={filteredContacts} onDeleteContact={handleDelete} />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}